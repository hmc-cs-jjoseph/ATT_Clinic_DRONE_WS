// Generated by gencpp from file tuner/GetSignalStatusResponse.msg
// DO NOT EDIT!


#ifndef TUNER_MESSAGE_GETSIGNALSTATUSRESPONSE_H
#define TUNER_MESSAGE_GETSIGNALSTATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mailroom/ATSCsignal.h>

namespace tuner
{
template <class ContainerAllocator>
struct GetSignalStatusResponse_
{
  typedef GetSignalStatusResponse_<ContainerAllocator> Type;

  GetSignalStatusResponse_()
    : signaldata()  {
    }
  GetSignalStatusResponse_(const ContainerAllocator& _alloc)
    : signaldata(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mailroom::ATSCsignal_<ContainerAllocator>  _signaldata_type;
  _signaldata_type signaldata;




  typedef boost::shared_ptr< ::tuner::GetSignalStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuner::GetSignalStatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSignalStatusResponse_

typedef ::tuner::GetSignalStatusResponse_<std::allocator<void> > GetSignalStatusResponse;

typedef boost::shared_ptr< ::tuner::GetSignalStatusResponse > GetSignalStatusResponsePtr;
typedef boost::shared_ptr< ::tuner::GetSignalStatusResponse const> GetSignalStatusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuner::GetSignalStatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tuner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/attclinic/software/drone_ws/src/dji_sdk/msg', '/home/attclinic/software/drone_ws/devel/share/dji_sdk/msg'], 'mailroom': ['/home/attclinic/software/drone_ws/src/mailroom/msg'], 'actionlib_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuner::GetSignalStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuner::GetSignalStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuner::GetSignalStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a082b1c929d63eae2f0d5b254b584ec";
  }

  static const char* value(const ::tuner::GetSignalStatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a082b1c929d63eaULL;
  static const uint64_t static_value2 = 0xe2f0d5b254b584ecULL;
};

template<class ContainerAllocator>
struct DataType< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuner/GetSignalStatusResponse";
  }

  static const char* value(const ::tuner::GetSignalStatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mailroom/ATSCsignal signaldata\n\
\n\
\n\
================================================================================\n\
MSG: mailroom/ATSCsignal\n\
uint32[] channel\n\
uint32[] SS\n\
uint32[] SNQ\n\
";
  }

  static const char* value(const ::tuner::GetSignalStatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signaldata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GetSignalStatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuner::GetSignalStatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuner::GetSignalStatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "signaldata: ";
    s << std::endl;
    Printer< ::mailroom::ATSCsignal_<ContainerAllocator> >::stream(s, indent + "  ", v.signaldata);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUNER_MESSAGE_GETSIGNALSTATUSRESPONSE_H
