// Generated by gencpp from file mailroom/ATSCsignal.msg
// DO NOT EDIT!


#ifndef MAILROOM_MESSAGE_ATSCSIGNAL_H
#define MAILROOM_MESSAGE_ATSCSIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mailroom
{
template <class ContainerAllocator>
struct ATSCsignal_
{
  typedef ATSCsignal_<ContainerAllocator> Type;

  ATSCsignal_()
    : channel(0)
    , SS(0)
    , SNQ(0)  {
    }
  ATSCsignal_(const ContainerAllocator& _alloc)
    : channel(0)
    , SS(0)
    , SNQ(0)  {
  (void)_alloc;
    }



   typedef uint8_t _channel_type;
  _channel_type channel;

   typedef uint8_t _SS_type;
  _SS_type SS;

   typedef uint8_t _SNQ_type;
  _SNQ_type SNQ;




  typedef boost::shared_ptr< ::mailroom::ATSCsignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mailroom::ATSCsignal_<ContainerAllocator> const> ConstPtr;

}; // struct ATSCsignal_

typedef ::mailroom::ATSCsignal_<std::allocator<void> > ATSCsignal;

typedef boost::shared_ptr< ::mailroom::ATSCsignal > ATSCsignalPtr;
typedef boost::shared_ptr< ::mailroom::ATSCsignal const> ATSCsignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mailroom::ATSCsignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mailroom::ATSCsignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mailroom

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mailroom': ['/home/attclinic/software/drone_ws/src/mailroom/msg'], 'std_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mailroom::ATSCsignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mailroom::ATSCsignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mailroom::ATSCsignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mailroom::ATSCsignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mailroom::ATSCsignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mailroom::ATSCsignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mailroom::ATSCsignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "063ee36b89b5191f33facb8c16b0feb7";
  }

  static const char* value(const ::mailroom::ATSCsignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x063ee36b89b5191fULL;
  static const uint64_t static_value2 = 0x33facb8c16b0feb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mailroom::ATSCsignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mailroom/ATSCsignal";
  }

  static const char* value(const ::mailroom::ATSCsignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mailroom::ATSCsignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 channel\n\
uint8 SS\n\
uint8 SNQ\n\
";
  }

  static const char* value(const ::mailroom::ATSCsignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mailroom::ATSCsignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.SS);
      stream.next(m.SNQ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ATSCsignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mailroom::ATSCsignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mailroom::ATSCsignal_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.channel);
    s << indent << "SS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SS);
    s << indent << "SNQ: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SNQ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAILROOM_MESSAGE_ATSCSIGNAL_H
