// Generated by gencpp from file mailroom/drone_move.msg
// DO NOT EDIT!


#ifndef MAILROOM_MESSAGE_DRONE_MOVE_H
#define MAILROOM_MESSAGE_DRONE_MOVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mailroom
{
template <class ContainerAllocator>
struct drone_move_
{
  typedef drone_move_<ContainerAllocator> Type;

  drone_move_()
    : local_x(0.0)
    , local_y(0.0)
    , height(0)
    , az_angle(0)
    , channels()  {
    }
  drone_move_(const ContainerAllocator& _alloc)
    : local_x(0.0)
    , local_y(0.0)
    , height(0)
    , az_angle(0)
    , channels(_alloc)  {
  (void)_alloc;
    }



   typedef double _local_x_type;
  _local_x_type local_x;

   typedef double _local_y_type;
  _local_y_type local_y;

   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _az_angle_type;
  _az_angle_type az_angle;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _channels_type;
  _channels_type channels;




  typedef boost::shared_ptr< ::mailroom::drone_move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mailroom::drone_move_<ContainerAllocator> const> ConstPtr;

}; // struct drone_move_

typedef ::mailroom::drone_move_<std::allocator<void> > drone_move;

typedef boost::shared_ptr< ::mailroom::drone_move > drone_movePtr;
typedef boost::shared_ptr< ::mailroom::drone_move const> drone_moveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mailroom::drone_move_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mailroom::drone_move_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mailroom

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/attclinic/software/drone_ws/src/dji_sdk/msg', '/home/attclinic/software/drone_ws/devel/share/dji_sdk/msg'], 'mailroom': ['/home/attclinic/software/drone_ws/src/mailroom/msg'], 'actionlib_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/home/attclinic/ros_catkin_ws_kinetic/install_isolated/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mailroom::drone_move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mailroom::drone_move_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mailroom::drone_move_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mailroom::drone_move_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mailroom::drone_move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mailroom::drone_move_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mailroom::drone_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13cf322e3b3fad8fa26fe5682e2de0bd";
  }

  static const char* value(const ::mailroom::drone_move_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13cf322e3b3fad8fULL;
  static const uint64_t static_value2 = 0xa26fe5682e2de0bdULL;
};

template<class ContainerAllocator>
struct DataType< ::mailroom::drone_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mailroom/drone_move";
  }

  static const char* value(const ::mailroom::drone_move_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mailroom::drone_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 local_x\n\
float64 local_y\n\
uint32 height\n\
uint32 az_angle\n\
uint32[] channels\n\
";
  }

  static const char* value(const ::mailroom::drone_move_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mailroom::drone_move_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local_x);
      stream.next(m.local_y);
      stream.next(m.height);
      stream.next(m.az_angle);
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct drone_move_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mailroom::drone_move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mailroom::drone_move_<ContainerAllocator>& v)
  {
    s << indent << "local_x: ";
    Printer<double>::stream(s, indent + "  ", v.local_x);
    s << indent << "local_y: ";
    Printer<double>::stream(s, indent + "  ", v.local_y);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "az_angle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.az_angle);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAILROOM_MESSAGE_DRONE_MOVE_H
